use aes_gcm::{
    aead::{Aead, KeyInit},
    Aes256Gcm, Key, Nonce,
};

const CIPHER_TEXT: [u8; 60] = [
    0xfa, 0xa6, 0x56, 0x32, 0xc3, 0x71, 0x30, 0xcd, 0x29, 0x16, 0x16, 0xf, 0x39, 0x4f, 0xe7, 0x65,
    0x2e, 0xfa, 0x5, 0xdb, 0xcc, 0xea, 0x47, 0x12, 0xc8, 0xf4, 0x7f, 0xed, 0x90, 0x30, 0xf6, 0xad,
    0xab, 0xb1, 0x50, 0xa7, 0xa2, 0xcf, 0xb5, 0xd1, 0x3b, 0x2e, 0xb3, 0x9a, 0xfe, 0x36, 0xa0, 0x8e,
    0x90, 0x18, 0x9f, 0x4, 0xe7, 0xcb, 0x79, 0x61, 0x5c, 0xd9, 0x5b, 0x38,
];

const NONCE: [u8; 12] = [
    0xff, 0x06, 0x72, 0x45, 0xc6, 0xae, 0x7b, 0x9f, 0xc1, 0x36, 0xd4, 0x8e,
];

const KEY: [u8; 32] = [
    0x95, 0x87, 0xe8, 0xe7, 0xde, 0xc0, 0x3c, 0x28, 0xa2, 0x8c, 0xa1, 0xf7, 0x35, 0x27, 0x23, 0x81,
    0x6c, 0x21, 0x6e, 0x10, 0x71, 0x4a, 0x62, 0x0b, 0x9e, 0x36, 0x78, 0x93, 0x38, 0x96, 0x90, 0xcf,
];

fn main() {
    let key: &Key<Aes256Gcm> = Key::<Aes256Gcm>::from_slice(&KEY);
    let cipher = Aes256Gcm::new(key);
    let nonce = Nonce::from_slice(&NONCE);
    let pt = cipher.decrypt(nonce, CIPHER_TEXT.as_slice()).unwrap();
    println!("{:X?}", String::from_utf8_lossy(pt.as_slice()));
}

// DUCTF{enCrypTi0n_I5_NoT_Th3_S@me_as_H@sh1ng}
