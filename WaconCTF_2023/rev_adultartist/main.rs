/*
    This has been solved after the end of the CTF.

    Needs to be built to x86 without PIE to patch the binary:
    $ CFLAGS="-m32" RUSTFLAGS='-C relocation-model=dynamic-no-pic -C link-args=-no-pie' \
        cargo run --target i686-unknown-linux-gnu src/main.rs

    ... after a while...

    Found: 6F584177, i = 99
    Current result string: "Eha1eNvFmgD4sZJHKJ3lsfszArr4HphX7kyGmygUEodK6PpaQ6Pj3kTyXvWVJBZL6RiNPwMn1kb0oeoSJ0EH6obmmRvvHlrvQsU8fM922HJkb98dNVUvYl5FReBCytwQ8zeOFD
    3Qc4OEkdLjX5riXhDYC5SiGbOektwQeNepzD3e87FzV2qJaTd9rVEWXGAVHtXrVX4JrZf6PlRJAUIZhzNlKlV4A8iRdlTFfLgWngtHoDT7GMscdePm0qH5XNfjUl50zKLN6OdFON1lLmoIIzUmhkfVGw16JtbC
    UW2sHUI6PB35KtNwNfNJa4lYu6QfhOaN7h2E1PvyuNHOGcBmlssNkGXzAfTuuWpYd7NtBPjHbL2et2afS8iXRXIyjUyAMFIyD2ZJ2S1ZwAXo"

    $ ./masterpiece
    Eha1eNvFmgD4sZJHKJ3lsfszArr4HphX7kyGmygUEodK6PpaQ6Pj3kTyXvWVJBZL6RiNPwMn1kb0oeoSJ0EH6obmmRvvHlrvQsU8fM922HJkb98dNVUvYl5FReBCytwQ8zeOFD3Qc4OEkdLjX5riXhDYC5SiGbOektwQeNepzD3e87FzV2qJaTd9rVEWXGAVHtXrVX4JrZf6PlRJAUIZhzNlKlV4A8iRdlTFfLgWngtHoDT7GMscdePm0qH5XNfjUl50zKLN6OdFON1lLmoIIzUmhkfVGw16JtbCUW2sHUI6PB35KtNwNfNJa4lYu6QfhOaN7h2E1PvyuNHOGcBmlssNkGXzAfTuuWpYd7NtBPjHbL2et2afS8iXRXIyjUyAMFIyD2ZJ2S1ZwAXo
    Correct%

    $ python flag.py Eha1eNvFmgD4sZJHKJ3lsfszArr4HphX7kyGmygUEodK6PpaQ6Pj3kTyXvWVJBZL6RiNPwMn1kb0oeoSJ0EH6obmmRvvHlrvQsU8fM922HJkb98dNVUvYl5FReBCytwQ8zeOFD3Qc4OEkdLjX5riXhDYC5SiGbOektwQeNepzD3e87FzV2qJaTd9rVEWXGAVHtXrVX4JrZf6PlRJAUIZhzNlKlV4A8iRdlTFfLgWngtHoDT7GMscdePm0qH5XNfjUl50zKLN6OdFON1lLmoIIzUmhkfVGw16JtbCUW2sHUI6PB35KtNwNfNJa4lYu6QfhOaN7h2E1PvyuNHOGcBmlssNkGXzAfTuuWpYd7NtBPjHbL2et2afS8iXRXIyjUyAMFIyD2ZJ2S1ZwAXo
    WACON2023{583f7c0189b232225e07c755f734c82029f58113c60f4eab75ab31159b568f49}
*/

use std::arch::asm;
use std::fs::File;
use std::io::Read;

use memmap::MmapMut;

const BINARY_START: u32 = 0x08048000;
const VMX: [u8; 11] = [
    0x2e, 0xc4, 0xe2, 0x71, 0x96, 0x84, 0x9a, 0x0c, 0x80, 0x0e, 0x08,
];

const FUNCTIONS: [u32; 102] = [
    0x08049206, 0x0804ccd3, 0x0804d921, 0x0804e565, 0x0804f391, 0x08050172, 0x08051147, 0x080520e4,
    0x08052f53, 0x08053e01, 0x08054c34, 0x08055a36, 0x0805680d, 0x08057603, 0x08058417, 0x080592d0,
    0x0805a26c, 0x0805b1a8, 0x0805c189, 0x0805d214, 0x0805e3e4, 0x0805f960, 0x08061309, 0x08062ebf,
    0x08064abc, 0x08066618, 0x08068236, 0x08069f4f, 0x0806bdaa, 0x0806df5b, 0x08070050, 0x08071f38,
    0x08073f2c, 0x08075b49, 0x080774f2, 0x08078fe6, 0x0807ad9e, 0x0807cb59, 0x0807e805, 0x08080549,
    0x080821a4, 0x08083f68, 0x08085d9d, 0x08087d1a, 0x08089bcc, 0x0808b60b, 0x0808d4d1, 0x0808fb51,
    0x08092136, 0x08094763, 0x08096aa0, 0x08098c19, 0x0809aeba, 0x0809d252, 0x0809f678, 0x080a1b4d,
    0x080a3ce6, 0x080a5b61, 0x080a7b67, 0x080a98cb, 0x080ab6d0, 0x080ad4f1, 0x080af427, 0x080b1354,
    0x080b3388, 0x080b5091, 0x080b71bb, 0x080b93ae, 0x080bb646, 0x080bd6d5, 0x080bf5f3, 0x080c145a,
    0x080c306d, 0x080c4c18, 0x080c6942, 0x080c8611, 0x080ca20a, 0x080cbcf4, 0x080cd4b2, 0x080cee78,
    0x080d0865, 0x080d21d7, 0x080d3b7d, 0x080d5074, 0x080d6073, 0x080d721d, 0x080d841c, 0x080d95bc,
    0x080da6b8, 0x080db6ca, 0x080dc6fe, 0x080dd6a4, 0x080de58b, 0x080df456, 0x080e02df, 0x080e114c,
    0x080e211c, 0x080e30f3, 0x080e413a, 0x080e51a0, 0x80e5dec, 0x80e69f5,
];

const TARGET_VALUES: [u32; 101] = [
    0x4d2eee49, 0xd3fd699f, 0x48150e2b, 0x6e5c6c8e, 0xd52f872b, 0x37c34028, 0x3516a021, 0x576828af,
    0xaccee202, 0x95980f8b, 0xe334d441, 0xf9b7d7c6, 0xcb204958, 0x090c776b, 0x787d5dbb, 0x84947683,
    0x37e1c86b, 0x9e553f4d, 0x90e165e4, 0x37dc1581, 0x5f157898, 0x4e4d4ea3, 0xcd995ee4, 0xed4de610,
    0x6b9d2d51, 0x3ba57b22, 0x5318da4c, 0xb50ef789, 0x83e87ffc, 0x2504e6d9, 0x02a9c73d, 0xba50f1e8,
    0x87570f43, 0x04d77c9a, 0x2badc40c, 0x74f4cab8, 0x1dd96adf, 0xb4185ccf, 0x147bceb0, 0x77e2f5f0,
    0xb5dfccd6, 0x9df3c9c5, 0x1c8e878c, 0x5a6bdad1, 0x972692c3, 0xa4eda179, 0x33868f58, 0xc004230a,
    0x49b9f3c9, 0x97282298, 0x2cb597f1, 0x7eb564c8, 0xbda8d42d, 0x47e81489, 0x3655795f, 0xd9757de6,
    0x50de201c, 0xd40d2450, 0xa3e6a4c0, 0x5b68f183, 0x48a765dd, 0xe2499439, 0xab01aa34, 0xad676ed6,
    0x2df00f34, 0x69d9a959, 0x63771133, 0x09cf4992, 0xbe678e70, 0x1271d783, 0x2b3ade23, 0x7e5dda18,
    0x0d76d7a6, 0x943152da, 0x9401b1d1, 0xd6cbaf59, 0xfe443292, 0xd301eaae, 0xabdc8199, 0x48616c16,
    0x2a3e7f4f, 0x619bc2fe, 0xf25c079a, 0x324bb7ae, 0x4a192e28, 0x50c06992, 0x6bc776ed, 0x97b93ce7,
    0x996220eb, 0x19377090, 0xf7ac936b, 0x5a0d1010, 0xb323048e, 0xd1e9b99a, 0x540888cf, 0x1d1241fc,
    0xc9cc3a01, 0x6bb6357a, 0x8dacaf9b, 0x8bad9b0b, 0x68732e00,
];

static S_BOX: [u8; 0x100] = [
    0x65, 0xf2, 0xaa, 0x4f, 0x01, 0x89, 0x93, 0x3a, 0xc2, 0x08, 0x1c, 0xc3, 0x3b, 0x3f, 0x7b, 0x6f,
    0x38, 0xfe, 0xdb, 0x7a, 0x90, 0x7f, 0x5f, 0x51, 0x4b, 0x3d, 0x17, 0x68, 0x80, 0x9b, 0x29, 0xc4,
    0x88, 0x79, 0xf5, 0xca, 0x28, 0x0f, 0x06, 0x2a, 0x70, 0x44, 0x67, 0x2f, 0x23, 0x8b, 0xb9, 0x74,
    0x78, 0x0b, 0x72, 0x6a, 0x8d, 0x37, 0x1e, 0xfd, 0xaf, 0x4a, 0x50, 0x56, 0xa1, 0x20, 0xff, 0xeb,
    0x5e, 0xa3, 0xb7, 0x22, 0xf8, 0xdd, 0x6e, 0x6d, 0x59, 0xc6, 0xd1, 0x36, 0xe2, 0x19, 0x5d, 0xa9,
    0xe5, 0x14, 0x83, 0x53, 0xd0, 0x9c, 0xbb, 0x87, 0x34, 0x58, 0xa5, 0x26, 0x8f, 0xa4, 0xac, 0xba,
    0xd5, 0x76, 0x7c, 0x73, 0x1a, 0x57, 0x4e, 0x9f, 0x24, 0xb5, 0x97, 0x0a, 0x27, 0x5c, 0xe3, 0xbf,
    0x5b, 0x13, 0x7e, 0x43, 0x04, 0x32, 0x1f, 0x00, 0x16, 0x02, 0x61, 0xa2, 0xd9, 0xad, 0x91, 0xc1,
    0xd4, 0xef, 0x33, 0x85, 0xe0, 0x31, 0xf3, 0x47, 0x18, 0xec, 0xf4, 0x48, 0xb4, 0x45, 0x3c, 0x86,
    0xe4, 0x9e, 0x77, 0x12, 0xcb, 0x6c, 0x84, 0xbe, 0xc9, 0xa7, 0x35, 0xa8, 0x98, 0xee, 0xda, 0xfa,
    0xe7, 0xa0, 0xc7, 0xbd, 0x4c, 0x8c, 0xfc, 0xae, 0x0c, 0xf9, 0x41, 0x39, 0x4d, 0x69, 0x92, 0xc5,
    0x25, 0x52, 0x07, 0x42, 0xce, 0x2c, 0x0d, 0xd7, 0x63, 0xb0, 0xd2, 0x2b, 0x96, 0x94, 0xb8, 0xa6,
    0x40, 0x8e, 0x11, 0xbc, 0x60, 0x9a, 0x82, 0xdf, 0x21, 0xd8, 0x7d, 0x5a, 0x2d, 0x71, 0x1b, 0x46,
    0x1d, 0xe8, 0xcd, 0xe9, 0x54, 0xed, 0x81, 0xcf, 0xde, 0x8a, 0x55, 0xdc, 0x15, 0x66, 0xb2, 0xc0,
    0xea, 0x3e, 0x95, 0x10, 0xd6, 0x6b, 0x05, 0xb1, 0x03, 0xc8, 0x99, 0x9d, 0xb3, 0xe6, 0xab, 0xfb,
    0xf6, 0xe1, 0xcc, 0xf1, 0x49, 0x09, 0xd3, 0xf7, 0xb6, 0x0e, 0x64, 0xf0, 0x62, 0x75, 0x2e, 0x30,
];

// S_BOX address in the binary, as found in opcodes
const BIN_S_BOX_OPCODE: [u8; 4] = [0x18, 0x80, 0x0e, 0x08];

fn brute_function(content: &Vec<u8>, function_index: usize) -> Option<u32> {
    let mut byte_code: Vec<u8> = Vec::new();

    // Building JITed function

    // mov eax, ecx
    // mov ecx, edx
    byte_code.extend_from_slice(&[0x89, 0xC8, 0x89, 0xD1]);

    let mut i = (FUNCTIONS[function_index] - BINARY_START) as usize;

    while i < content.len() {
        if function_index == FUNCTIONS.len() - 1 {
            return None;
        }

        // 5 is the len of the last jmp sub_80e69f5 opcode, that we don't want to execute
        if i >= (FUNCTIONS[function_index + 1] - BINARY_START - 5) as usize {
            break;
        }

        // change s_box address in movs
        if i < content.len() - BIN_S_BOX_OPCODE.len()
            && content[i..i + BIN_S_BOX_OPCODE.len()] == BIN_S_BOX_OPCODE
        {
            /*
             * This sometimes needs to be adjusted.
             * the Rust S_BOX address changes if you modify the program.
             */
            byte_code.extend_from_slice(&[0xD8, 0x40, 0x09, 0x08]);
            i += BIN_S_BOX_OPCODE.len();
            continue;
        }

        if i < content.len() - VMX.len() && content[i..i + VMX.len()] == VMX {
            i += VMX.len();
            continue;
        }

        byte_code.push(content[i]);

        i += 1;
    }

    // push ret
    byte_code.push(0xc3);

    let mut m = MmapMut::map_anon(byte_code.len()).unwrap();
    m.clone_from_slice(&byte_code);
    let m = m.make_exec().unwrap();
    let func_ptr = m.as_ptr();

    let func: extern "fastcall" fn(u32, u32);
    unsafe {
        func = std::mem::transmute(func_ptr);
    }

    let mut v: u32 = 0;
    for i in 0x20..0x80 {
        for j in 0x20..0x80 {
            for k in 0x20..0x80 {
                for l in 0x20..0x80 {
                    v = (i << 24) + (j << 16) + (k << 8) + l;

                    let mut ret = 0;
                    func(v, function_index as u32);
                    unsafe {
                        asm!(r#"
                            mov edi, eax
                        "#, out("edi") ret);
                    }

                    if ret == TARGET_VALUES[function_index] {
                        return Some(v);
                    }
                }
            }
        }
    }
    None
}

fn main() {
    println!("S_BOX: {:X?}", S_BOX.as_ptr());

    let mut file = File::open("../masterpiece").expect("failed to open file");
    let mut content = Vec::new();
    file.read_to_end(&mut content).expect("failed to read file");

    let mut output: String = String::new();

    // TODO(tleroy): make //
    for i in 0..FUNCTIONS.len() {
        if let Some(ret) = brute_function(&content, i) {
            println!("Found: {:X?}, i = {:?}", ret, i);
            output.push_str(std::str::from_utf8(ret.to_le_bytes().as_slice()).unwrap());
            println!("Current output: {:?}", output);
        }
    }
}
